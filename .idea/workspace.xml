<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="040fd19c-99f3-4bd6-96fc-5ce40db4fa0f" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/src/main/scala/GuessWhoExample.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/scala/example/Main.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/scala/example/Main.scala" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="SBT">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="scala101" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Scala Worksheet" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2o6gD4ceDCkYXyKiW03465j5J2e" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.GuessWhoExample.executor": "Run",
    "Application.Main.executor": "Run",
    "Application.hello.executor": "Run",
    "Application.run.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "ScalaTest.CalculateTaxSpec.calculateTax should calculate the correct percentage of the input.executor": "Run",
    "ScalaTest.CalculateTaxSpec.executor": "Run",
    "ScalaTest.CubeCalculatorTest.CubeCalculator.cube 0 should be 0.executor": "Run",
    "ScalaTest.CubeCalculatorTest.CubeCalculator.cube 3 should be 27.executor": "Run",
    "ScalaTest.CubeCalculatorTest.executor": "Run",
    "ScalaTest.FizzBuzzSpec.executor": "Run",
    "ScalaTest.GuessWhoSpec.executor": "Run",
    "ScalaTest.GuessWhoSpec.guessCharacter should throw an exception if an invalid name is input.executor": "Run",
    "ScalaTest.GuessWhoSpec.guessWho should create a list of all character names.executor": "Run",
    "ScalaTest.GuessWhoSpec.guessWho should filter the list of characters and print the correct result when a character is guessed.executor": "Run",
    "ScalaTest.GuessWhoSpec.guessWho should filter the list of characters when a question is posed.executor": "Run",
    "ScalaTest.GuessWhoSpec.guessWho should print the list of character names correctly.executor": "Run",
    "ScalaTest.GuessWhoSpec.guessWho should reset the game board with all characters.executor": "Run",
    "ScalaTest.GuessWhoSpec.poseQuestion should throw an exception if the guess attribute is invalid.executor": "Run",
    "ScalaTest.GuessWhoSpec.poseQuestion should throw an exception if the guess value is invalid.executor": "Run",
    "ScalaTest.TwoNumbersSpec.add should add numbers.executor": "Run",
    "ScalaTest.TwoNumbersSpec.executor": "Run",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "SDKs",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
    </key>
  </component>
  <component name="RunManager" selected="Application.GuessWhoExample">
    <configuration name="GuessWhoExample" type="Application" factoryName="Application" temporary="true">
      <option name="MAIN_CLASS_NAME" value="GuessWhoExample" />
      <module name="scala101" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Run the program" type="SbtRunConfiguration" factoryName="sbt Task" show_console_on_std_err="false" show_console_on_std_out="false">
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="tasks" value="~run" />
      <option name="useSbtShell" value="true" />
      <option name="vmparams" value="-Xms512M -Xmx1024M -Xss1M" />
      <option name="workingDir" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GuessWhoSpec" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="scala101" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Class" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="GuessWhoSpec" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GuessWhoSpec.guessCharacter should throw an exception if an invalid name is input" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="scala101" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="GuessWhoSpec" />
      <option name="testName" value="guessCharacter should throw an exception if an invalid name is input" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GuessWhoSpec.poseQuestion should throw an exception if the guess attribute is invalid" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="scala101" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="GuessWhoSpec" />
      <option name="testName" value="poseQuestion should throw an exception if the guess attribute is invalid" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GuessWhoSpec.poseQuestion should throw an exception if the guess value is invalid" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="scala101" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="GuessWhoSpec" />
      <option name="testName" value="poseQuestion should throw an exception if the guess value is invalid" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.GuessWhoExample" />
      <item itemvalue="sbt Task.Run the program" />
      <item itemvalue="ScalaTest.GuessWhoSpec.guessCharacter should throw an exception if an invalid name is input" />
      <item itemvalue="ScalaTest.GuessWhoSpec.poseQuestion should throw an exception if the guess attribute is invalid" />
      <item itemvalue="ScalaTest.GuessWhoSpec.poseQuestion should throw an exception if the guess value is invalid" />
      <item itemvalue="ScalaTest.GuessWhoSpec" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.GuessWhoExample" />
        <item itemvalue="ScalaTest.GuessWhoSpec" />
        <item itemvalue="ScalaTest.GuessWhoSpec.poseQuestion should throw an exception if the guess attribute is invalid" />
        <item itemvalue="ScalaTest.GuessWhoSpec.poseQuestion should throw an exception if the guess value is invalid" />
        <item itemvalue="ScalaTest.GuessWhoSpec.guessCharacter should throw an exception if an invalid name is input" />
      </list>
    </recent_temporary>
  </component>
  <component name="ScalaProjectSettings">
    <option name="migrateConfigurationsNotificationShown" value="true" />
    <option name="scala3DisclaimerShown" value="true" />
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23726.103" />
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23726.103" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="040fd19c-99f3-4bd6-96fc-5ce40db4fa0f" name="Changes" comment="" />
      <created>1730195316600</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730195316600</updated>
      <workItem from="1730716315319" duration="7577000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>